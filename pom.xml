<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.easyteam</groupId>
	<artifactId>maven_gae_template</artifactId>

	<!-- Project Informations -->
	<name>maven_gae_template</name>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<!-- Organization -->
	<organization>
	</organization>

	<!-- Project Developers -->
	<description>maven_gae_template</description>
	<developers>
		<developer>
			<name>Anderson Soares</name>
			<email>aersandersonsoares@gmail.com</email>
			<roles>
				<role>Backend Developer</role>
			</roles>
		</developer>
		<developer>
			<name>Cleiton Moura</name>
			<email>cleitonmoura18@gmail.com</email>
			<roles>
				<role>Tester</role>
			</roles>
		</developer>
		<developer>
			<name>Deinny Martins</name>
			<email>deinnymartins@gmail.com</email>
			<roles>
				<role>Design Grafico</role>
			</roles>
		</developer>
		<developer>
			<name>Matheus Meneses</name>
			<email>matheusmmcs@gmail.com</email>
			<roles>
				<role>FrontEnd Developer</role>
			</roles>
		</developer>
		<developer>
			<name>Pedro Almir</name>
			<email>petrus.cc@gmail.com</email>
			<roles>
				<role>Scrum Master</role>
			</roles>
		</developer>
		<developer>
			<name>Rogerio Figueredo</name>
			<email>srogerf@hotmail.com</email>
			<roles>
				<role>Backend Developer</role>
			</roles>
		</developer>
		<developer>
			<name>Werney Ayala</name>
			<email>werney.zero@gmail.com</email>
			<roles>
				<role>Backend Developer</role>
			</roles>
		</developer>
	</developers>

	<!-- Project Contributors -->
	<contributors>
		<contributor>
			<name>Armando Sousa</name>
			<email>armando.sousa@gmail.com</email>
		</contributor>
		<contributor>
			<name>Pedro de Alcantara dos Santos Neto</name>
			<email>pasn1411@gmail.com</email>
			<roles>
				<role>Product Owner</role>
			</roles>
		</contributor>
	</contributors>

	<properties>
		<!-- SpringFramework Version -->
		<org.springframework.version>3.2.1.RELEASE</org.springframework.version>
		<!-- JUnit Version -->
		<junit.version>4.11</junit.version>
		<!-- SLF4J Version -->
		<slf4j.version>1.6.6</slf4j.version>
		<!-- JODA Time Version -->
		<jodatime.version>2.1</jodatime.version>
		<!-- Project Build Source Encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- GAE Version -->
		<gae.version>1.7.4</gae.version>
		<!-- GAE Home -->
		<gae.home>C:\appengine-java-sdk-1.7.4</gae.home>
		<!-- Classes Directory -->
		<classes.directory>${basedir}\src\main\webapp\WEB-INF\classes</classes.directory>
		<!-- Test Classes Directory -->
		<test.classes.directory>${basedir}\target\test-classes</test.classes.directory>
		<!-- Lib Folder -->
		<lib.folder>${basedir}\src\main\webapp\WEB-INF\lib</lib.folder>
	</properties>

	<!-- Build configuration -->
	<build>
		<!-- Output directory -->
		<outputDirectory>${project.build.directory}</outputDirectory>
		<plugins>
			<!-- Maven AntRun Plugin: Criar a pasta classes dentro de WEB-INF e recria 
				a pasta lib -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>createDirectory</id>
						<phase>process-resources</phase>
						<configuration>
							<tasks>
								<!-- Create WEB-INF\classes and WEB-INF\lib -->
								<mkdir dir="${classes.directory}" />
								<delete dir="${basedir}\src\main\webapp\WEB-INF\lib" />
								<mkdir dir="${basedir}\src\main\webapp\WEB-INF\lib" />
								<!-- Copy GAE SDK libraries -->
								<copy file="${gae.home}\lib\user\appengine-api-1.0-sdk-1.7.4.jar"
									todir="${lib.folder}" />
								<copy file="${gae.home}\lib\impl\appengine-api-labs.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\appengine-endpoints\v1\appengine-endpoints.jar"
									todir="${lib.folder}" />
								<copy file="${gae.home}\lib\user\appengine-jsr107cache-1.7.4.jar"
									todir="${lib.folder}" />
								<copy file="${gae.home}\lib\opt\user\datanucleus\v2\asm-4.0.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\datanucleus-api-jdo-3.1.1.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\datanucleus-api-jpa-3.1.1.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\datanucleus-appengine-2.1.1.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\datanucleus-core-3.1.1.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\geronimo-jpa_2.0_spec-1.0.jar"
									todir="${lib.folder}" />
								<copy
									file="${gae.home}\lib\opt\user\datanucleus\v2\jdo-api-3.0.1.jar"
									todir="${lib.folder}" />
								<copy file="${gae.home}\lib\user\jsr107cache-1.1.jar"
									todir="${lib.folder}" />
								<copy file="${gae.home}\lib\opt\user\datanucleus\v2\jta-1.1.jar"
									todir="${lib.folder}" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Maven Compiler Plugin: Compila as classes e as coloca dentro de WEB-INF\classes -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<executions>
					<!-- Esta execucao e responsavel por compilar as classes dentro de src\main\java -->
					<execution>
						<id>ProcessResource</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compile</goal>
						</goals>
						<configuration>
							<outputDirectory>${classes.directory}</outputDirectory>
							<compilerArguments>
								<!-- Diretorio onde estao as classes compiladas -->
								<d>${classes.directory}</d>
							</compilerArguments>
						</configuration>
					</execution>
					<!-- Esta execucao e responsavel por compilar as classes de teste dentro 
						de src\tests\java -->
					<execution>
						<id>ProcessTestResource</id>
						<phase>process-test-sources</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
						<configuration>
							<!-- Diretorio onde estao os testes compilados -->
							<outputDirectory>${test.classes.directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
				<!-- Configuracoes gerais -->
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- Este plugin e responsavel por colocar as dependencias descritas no 
				pom.xml dentro da pasta WEB-INF\lib para que o WebApplication funcione corretamente. -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>prepareLibs</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${lib.folder}</outputDirectory>
							<!-- Estes artefatos devem ser excluidos para que nao ocorra problemas 
								na execução do WebApplication -->
							<excludeArtifactIds>appengine-testing,appengine-api-stubs,appengine-api-labs,junit,selenium-java,selenium-server,hamcrest-all</excludeArtifactIds>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Plugin para controlar a cobertura de teste -->
			<!-- Reporting -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<reportPlugins>
						<!-- Reporting on success / failure of unit tests -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-report-plugin</artifactId>
							<version>2.6</version>
						</plugin>
						<!-- Reporting on code coverage by unit tests. -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>cobertura-maven-plugin</artifactId>
							<version>2.5.1</version>
							<configuration>
								<formats>
									<format>xml</format>
									<format>html</format>
								</formats>
							</configuration>
						</plugin>
					</reportPlugins>
				</configuration>
			</plugin>
			<!-- Plugin para gerar um site com as informacoes do projeto -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.2</version>
			</plugin>
			<!-- Internationalization in Maven is very simple, as long as the reports 
				you are using have that particular locale defined. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.2</version>
				<configuration>
					<locales>en,fr</locales>
				</configuration>
			</plugin>
			<!-- Maven has several reports that you can add to your web site to display 
				the current state of the project. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.6</version>
			</plugin>
		</plugins>
	</build>

	<!-- Dependencias da aplicacao -->
	<dependencies>
		<!-- Essa dependencia precisa ser declarada para que a compilacao do Maven 
			funcione e para nao gerar conflito com o plugin do Google ela aponta para 
			o JAR dentro da pasta da SDK -->
		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-1.0-sdk</artifactId>
			<version>${gae.version}</version>
			<scope>system</scope>
			<systemPath>${gae.home}\lib\user\appengine-api-1.0-sdk-1.7.4.jar</systemPath>
		</dependency>

		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Expression Language (depends on spring-core) Define this if you use 
			Spring Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Web application development utilities applicable to both Servlet and 
			Portlet Environments (depends on spring-core, spring-beans, spring-context) 
			Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
			web framework with Spring (org.springframework.web.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
			Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
			Container (org.springframework.web.portlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc-portlet</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Spring Security Core -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>

		<!-- Spring Security Web -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>

		<!-- Spring Security Config -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>

		<!-- GAE libraries for local testing as described here: http://code.google.com/appengine/docs/java/howto/unittesting.html -->
		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-stubs</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-testing</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-labs</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>

		<!-- JUnit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

		<!-- Hamcrest -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<!-- URL Rewrite filter -->
		<dependency>
			<groupId>org.tuckey</groupId>
			<artifactId>urlrewritefilter</artifactId>
			<version>3.1.0</version>
		</dependency>

		<!-- Sitemesh -->
		<dependency>
			<groupId>opensymphony</groupId>
			<artifactId>sitemesh</artifactId>
			<version>2.4.2</version>
		</dependency>

		<!-- JSTL -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- aopalliance -->
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- JODA Time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${jodatime.version}</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		
		<!-- Commons Lang -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
		</dependency>
            

		<!-- Objectify -->
		<dependency>
			<groupId>com.googlecode.objectify</groupId>
			<artifactId>objectify</artifactId>
			<version>4.0b1</version>
			<exclusions>
				<exclusion>
					<artifactId>joda-money</artifactId>
					<groupId>org.joda</groupId>
				</exclusion>
				<exclusion>
					<artifactId>appengine-api-1.0-sdk</artifactId>
					<groupId>com.google.appengine</groupId>
				</exclusion>
				<exclusion>
					<artifactId>appengine-api-labs</artifactId>
					<groupId>com.google.appengine</groupId>
				</exclusion>
				<exclusion>
					<artifactId>jackson-core</artifactId>
					<groupId>com.fasterxml.jackson.core</groupId>
				</exclusion>
				<exclusion>
					<artifactId>jackson-databind</artifactId>
					<groupId>com.fasterxml.jackson.core</groupId>
				</exclusion>
				<exclusion>
					<artifactId>gwt-user</artifactId>
					<groupId>com.google.gwt</groupId>
				</exclusion>
				<exclusion>
					<artifactId>joda-time</artifactId>
					<groupId>joda-time</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Selenium dependency: Sera utilizada para criar os testes de view. -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.25.0</version>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>2.15.0</version>
			<exclusions>
				<exclusion>
					<artifactId>servlet-api-2.5</artifactId>
					<groupId>org.mortbay.jetty</groupId>
				</exclusion>
			</exclusions>
		</dependency>

	</dependencies>

</project>